/*
	 * Two Pointer Algorithm - Equi Directional
	 * Find the min and max for slow and fast pointer values
	 * if the abs difference is the less than or equal to limit -> find the longest and move right
	 * else reset the min and max with the right value -> left
	 *
	 */

	private int longestSubArray(int[] nums, int limit) {

		int left = 0, right = 0;
		int longest = Integer.MIN_VALUE, min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;

		while(left < nums.length && right < nums.length) {

			// find the min and max for the absolute difference
			min = Math.min(min, Math.min(nums[left], nums[right]));
			max = Math.max(max, Math.max(nums[left], nums[right]));

			// Check with the limit
			if(Math.abs(max-min) <= limit) {
				longest = Math.max(longest, right-left+1);
				right++;
			} else {
				right = ++left;
				min = nums[left];
				max = nums[left];
			}

		}
		return longest;

	}
/*
	 * Two Pointer Algorithm - Equi Directional
	 * Find the min and max for slow and fast pointer values
	 * if the abs difference is the less than or equal to limit -> find the longest and move right
	 * else reset the min and max with the right value -> left
	 *
	 */

	private int longestSubArray(int[] nums, int limit) {

		int left = 0, right = 0;
		int longest = Integer.MIN_VALUE, min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;

		while(left < nums.length && right < nums.length) {

			// find the min and max for the absolute difference
			min = Math.min(min, Math.min(nums[left], nums[right]));
			max = Math.max(max, Math.max(nums[left], nums[right]));

			// Check with the limit
			if(Math.abs(max-min) <= limit) {
				longest = Math.max(longest, right-left+1);
				right++;
			} else {
				right = ++left;
				min = nums[left];
				max = nums[left];
			}

		}
		return longest;

	}

	@Test
    	public void test4() {
    		int[] data = {1,3,5,7,2,4,6,8};
    		// {1,2,3,4,5,6,7,8}


    	}

    	@Test
    	public void test5() {
    		int[] data = {1,2,3,4,11,12,13,14};
    		// {1,11,2,12,3,13,4,14}
    	}

